#################################################################################################### 1.1

import cv2

img = cv2.imread(r"C:\Users\DELL\Pictures\img.jpg")

img.shape

img[0]

import matplotlib.pyplot as plt

plt.imshow(img)


while True:
	cv2.imshow('result',img)
	# 27 - ASCII of Escape
	if cv2.waitKey(2) == 27:
		break
cv2.destroyAllWindows()

haar_data = cv2.CascadeClassifier(r"C:\Users\DELL\Desktop\haarcascade_frontalface_default.xml")

haar_data.detectMultiScale(img)

# cv2.rectangle(img,(x,y),(w,h),(b,g,r),boarder_thickness)

while True:
	faces = haar_data.detectMultiScale(img)
	for x,y,w,h in faces:
		cv2.rectangle(img, (x,y), (x+w, y+h), (255,0,255), 4)
	cv2.imshow('result',img)
	if cv2.waitKey(2) == 27:
		break
cv2.destroyAllWindows()

################################################################################################## 1.2

{ this piece of code will start detecting the face }

capture = cv2.VideoCapture(0)
while True:
	flag, img = capture.read()
	if flag:
		faces = haar_data.detectMultiScale(img)
		for x,y,w,h in faces:
			cv2.rectangle(img, (x,y), (x+w, y+h), (255,0,255), 4)
		cv2.imshow('result',img)
		if cv2.waitKey(2) == 27:
			break

capture.release()
cv2.destroyAllWindows()
........................................................................


capture = cv2.VideoCapture(0)
data = []
while True:
	flag, img = capture.read()
	if flag:
		faces = haar_data.detectMultiScale(img)
		for x,y,w,h in faces:
			cv2.rectangle(img, (x,y), (x+w, y+h), (255,0,255), 4)
			face = img[y:y+h, x:x+w, :]
			face = cv2.resize(face, (50,50))
			print(len(data))
			if len(data) < 400:
				data.append(face)
		cv2.imshow('result',img)
		if cv2.waitKey(2) == 27 or len(data) >= 200:
			break

capture.release()
cv2.destroyAllWindows()
...........................................................................

import numpy as np

x = np.array([3,2,54,6])

x

x[0:2]

x = np.array([[3,4,54,67,8,8],[1,2,2,4,5,7],[4,5,3,5,6,7],[1,2,3,34,6,8]])

x

x[0]

x[0][1:4]

# x[row, col]
x[0:3, 0:3]

x[:,1:4]

np.save('without_mask.npy',data)

np.save('with_mask.npy',data)

plt.imshow(data[0])

############################################################################################ 1.3

import numpy as np
import cv2

with_mask = np.load('with_mask.npy')
without_mask = np.load('without_mask.npy')

with_mask.shape

without_mask.shape

with_mask = with_mask.reshape(200,50 * 50 * 3)
without_mask = without_mask.reshape(200,50 * 50 * 3)

with_mask.shape

without_mask.shape

X = np.r_[with_mask, without_mask]

X.shape

labels = np.zeros(X.shape[0])

labels[200:] = 1.0

names = {0 : 'Mask', 1 : 'No Mask'}

# svm - Support Vector Machine
# SVC - Support Vector Classification
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(X,labels, test_size=0.25)

x_train.shape

# PCA - Principal Component Analysis
from sklearn.decomposition import PCA

pca = PCA(n_components=3)
x_train = pca.fit_transform(x_train)

x_train[0]

x_train.shape

x_train, x_test, y_train, y_test = train_test_split(X,labels, test_size=0.20)

svm = SVC()
svm.fit(x_train, y_train)

# x_test = pca.transform(x_test)
y_pred = svm.predict(x_test)

accuracy_score(y_test, y_pred)
.............................................................................

{this code will not print mask/no mask on the box}

haar_data = cv2.CascadeClassifier(r"C:\Users\DELL\Desktop\haarcascade_frontalface_default.xml")
capture = cv2.VideoCapture(0)
data = []
while True:
	flag, img = capture.read()
	if flag:
		faces = haar_data.detectMultiScale(img)
		for x,y,w,h in faces:
			cv2.rectangle(img, (x,y), (x+w, y+h), (0,255,255), 4)
			face = img[y:y+h, x:x+w, :]
			face = cv2.resize(face, (50,50))
			face = face.reshape(1,-1)
			#face = pca.transform(face)
			pred = svm.predict(face)[0]
			n = names[int(pred)]
			print(n)
		cv2.imshow('result',img)
		#27 - ASCII of Escape
		if cv2.waitKey(2) == 27:
			break

capture.release()
cv2.destroyAllWindows()


*********************************************************************************************

{this code will print mask/no mask on the box}


haar_data = cv2.CascadeClassifier(r"C:\Users\DELL\Desktop\haarcascade_frontalface_default.xml")
capture = cv2.VideoCapture(0)
data = []
font = cv2.FONT_HERSHEY_COMPLEX
while True:
	flag, img = capture.read()
	if flag:
		faces = haar_data.detectMultiScale(img)
		for x,y,w,h in faces:
			cv2.rectangle(img, (x,y), (x+w, y+h), (0,255,255), 4)
			face = img[y:y+h, x:x+w, :]
			face = cv2.resize(face, (50,50))
			face = face.reshape(1,-1)
			#face = pca.transform(face)
			pred = svm.predict(face)
			cv2.putText(img, n, (x,y), font, 1, (244,0,0), 2)
			print(n)
		cv2.imshow('result',img)
		# 27 - ASCII of Escape
		if cv2.waitKey(2) == 27:
			break

capture.release()
cv2.destroyAllWindows()

###############################################################################


























